generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Team {
  id          BigInt   @id @default(autoincrement())
  createdAt   DateTime @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime @default(now()) @db.Timestamptz(6)
  name        String
  namespaceId BigInt   @unique

  Namespace      Namespace        @relation(fields: [namespaceId], references: [id], onDelete: SetNull)
  Alias          AliasEmail[]
  Attachment     Attachment[]
  EncryptedText  EncryptedText[]
  Inboxes        Inbox[]
  TeamInvite     TeamInvite[]
  Members        TeamMember[]
  Thread         Thread[]
  PostmarkDomain PostmarkDomain[]
  Subscription   Subscription[]
  StripeCustomer StripeCustomer[]
}

model Namespace {
  id        BigInt   @id @default(autoincrement())
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  namespace String   @unique
  Team      Team[]
}

model TeamMember {
  id        BigInt     @id @default(autoincrement())
  createdAt DateTime   @default(now()) @db.Timestamptz(6)
  updatedAt DateTime   @default(now()) @db.Timestamptz(6)
  teamId    BigInt
  profileId String     @db.Uuid
  role      MemberRole @default(member)

  Profile         Profile        @relation(fields: [profileId], references: [id], onDelete: SetNull)
  Team            Team           @relation(fields: [teamId], references: [id], onDelete: Cascade)
  Comment         Comment[]
  Message         Message[]
  Notifications   Notification[] @relation("for")
  TeamInvite      TeamInvite[]
  ThreadsChanged  ThreadState[]  @relation("DoneBy")
  AssignedThreads ThreadState[]  @relation("Assignee")

  NotificationPreference NotificationPreference[]
  @@unique([teamId, profileId])
}

model TeamInvite {
  id           BigInt           @id @default(autoincrement())
  createdAt    DateTime         @default(now()) @db.Timestamptz(6)
  updatedAt    DateTime         @default(now()) @db.Timestamptz(6)
  teamId       BigInt
  emailAddress String
  inviterId    BigInt
  status       TeamInviteStatus

  Inviter TeamMember @relation(fields: [inviterId], references: [id], onDelete: Cascade)
  Team    Team       @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([teamId, emailAddress])
}

model Profile {
  id        String    @id @db.Uuid
  createdAt DateTime? @default(now()) @db.Timestamptz(6)
  email     String
  firstName String?
  lastName  String?

  TeamMember TeamMember[]
}

model Inbox {
  id           BigInt   @id @default(autoincrement())
  createdAt    DateTime @default(now()) @db.Timestamptz(6)
  updatedAt    DateTime @default(now()) @db.Timestamptz(6)
  teamId       BigInt
  emailAddress String   @unique

  Team          Team                 @relation(fields: [teamId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  Thread        Thread[]
  PostmarkToken PostmarkServerToken?
}

model PostmarkServerToken {
  inboxId   BigInt   @id
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @db.Timestamptz(6)

  token String

  Inbox Inbox @relation(fields: [inboxId], references: [id], onDelete: Cascade)
}

model PostmarkDomain {
  domain    String   @id
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @db.Timestamptz(6)
  teamId    BigInt

  postmarkDomainId Int

  Team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)
}

model AliasEmail {
  id        BigInt   @id @default(autoincrement())
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  teamId    BigInt

  emailAddress String
  aliasName    String?

  team       Team         @relation(fields: [teamId], references: [id], onDelete: Cascade)
  Messages   Message[]
  Thread     Thread[]
  ThreadLink ThreadLink[]

  @@unique([teamId, emailAddress])
}

model Message {
  // Metadata
  id           BigInt           @id @default(autoincrement())
  createdAt    DateTime         @default(now()) @db.Timestamptz(6)
  type         MessageType
  direction    MessageDirection
  threadId     BigInt
  aliasId      BigInt?
  teamMemberId BigInt?

  // Message Data
  text    Json // SlateJS format [{children: [{text: "message"}]}]
  subject String?

  // FD
  Alias        AliasEmail?   @relation(fields: [aliasId], references: [id], onDelete: SetNull)
  TeamMember   TeamMember?   @relation(fields: [teamMemberId], references: [id], onDelete: SetNull)
  Thread       Thread        @relation(fields: [threadId], references: [id], onDelete: Cascade)
  Attachments  Attachment[]
  Comment      Comment[]
  EmailMessage EmailMessage?
  MessageError MessageError?
}

model EmailMessage {
  id        BigInt   @id @default(autoincrement())
  createdAt DateTime @default(now()) @db.Timestamptz(6)

  from            String
  to              String
  sourceMessageId String @unique
  subject         String
  textBody        String
  htmlBody        String
  raw             Json
  emailMessageId  String

  // FD
  messageId BigInt @unique

  Message Message @relation(fields: [messageId], references: [id], onDelete: Cascade)
}

model MessageError {
  // FD
  messageId BigInt @id

  errorName    String
  errorMessage String

  Message Message @relation(fields: [messageId], references: [id], onDelete: Cascade)
}

model Thread {
  id           BigInt   @id @default(autoincrement())
  createdAt    DateTime @default(now()) @db.Timestamptz(6)
  updatedAt    DateTime @default(now()) @db.Timestamptz(6)
  teamId       BigInt
  aliasEmailId BigInt
  inboxId      BigInt

  Alias        AliasEmail     @relation(fields: [aliasEmailId], references: [id], onDelete: Cascade)
  Inbox        Inbox?         @relation(fields: [inboxId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Team         Team           @relation(fields: [teamId], references: [id], onDelete: Cascade)
  Messages     Message[]
  ThreadLink   ThreadLink[]
  ThreadState  ThreadState[]
  Notification Notification[]
}

model ThreadState {
  id           BigInt          @id @default(autoincrement())
  createdAt    DateTime        @default(now()) @db.Timestamptz(6)
  threadId     BigInt
  teamMemberId BigInt?
  state        ThreadStateType
  doneById     BigInt?
  expiresAt    DateTime?

  DoneBy   TeamMember? @relation("DoneBy", fields: [doneById], references: [id])
  Assignee TeamMember? @relation("Assignee", fields: [teamMemberId], references: [id])
  Thread   Thread      @relation(fields: [threadId], references: [id], onDelete: Cascade)
}

model Comment {
  id        BigInt   @id @default(autoincrement())
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  messageId BigInt
  text      Json
  authorId  BigInt

  Author       TeamMember     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  Message      Message        @relation(fields: [messageId], references: [id], onDelete: Cascade)
  Notification Notification[]
}

model Notification {
  id          BigInt           @id @default(autoincrement())
  createdAt   DateTime         @default(now()) @db.Timestamptz(6)
  deliveredAt DateTime?        @db.Timestamptz(6)
  seenAt      DateTime?        @db.Timestamptz(6)
  clearedAt   DateTime?        @db.Timestamptz(6)
  forMemberId BigInt
  type        NotificationType
  text        String

  // FKeys
  commentId BigInt?
  threadId  BigInt?

  Comment Comment?   @relation(fields: [commentId], references: [id], onDelete: Cascade)
  For     TeamMember @relation("for", fields: [forMemberId], references: [id], onDelete: Cascade)
  Thread  Thread?    @relation(fields: [threadId], references: [id], onDelete: Cascade)
}

model ThreadLink {
  id           BigInt   @id @default(autoincrement())
  createdAt    DateTime @default(now()) @db.Timestamptz(6)
  threadId     BigInt
  aliasEmailId BigInt

  Alias  AliasEmail @relation(fields: [aliasEmailId], references: [id], onDelete: Cascade)
  Thread Thread     @relation(fields: [threadId], references: [id], onDelete: Cascade)

  @@unique([threadId, aliasEmailId])
}

model EncryptedText {
  id            BigInt   @id @default(autoincrement())
  createdAt     DateTime @default(now()) @db.Timestamptz(6)
  teamId        BigInt
  encryptedText String

  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)
}

model Attachment {
  id          BigInt   @id @default(autoincrement())
  createdAt   DateTime @default(now()) @db.Timestamptz(6)
  teamId      BigInt
  filename    String
  mimeType    String
  messageId   BigInt
  idempotency String?  @unique
  location    String

  message Message @relation(fields: [messageId], references: [id], onDelete: Cascade)
  team    Team    @relation(fields: [teamId], references: [id], onDelete: Cascade)
}

model NotificationPreference {
  // id
  teamMemberId BigInt
  type         NotificationType
  channel      NotificationChannel

  enabled Boolean

  TeamMember TeamMember @relation(fields: [teamMemberId], references: [id], onDelete: Cascade)
  @@id([teamMemberId, type, channel])
}

model Product {
  id        String   @id
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @db.Timestamptz(6)

  active      Boolean
  name        String
  description String?
  image       String?
  metadata    Json

  Price Price[]
}

model Price {
  id        String   @id
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @db.Timestamptz(6)

  productId       String
  active          Boolean
  description     String?
  unitAmount      BigInt?
  currency        String
  type            PriceType
  interval        PriceInterval?
  intervalCount   Int?
  trialPeriodDays Int?
  metadata        Json

  Product      Product        @relation(fields: [productId], references: [id], onDelete: Cascade)
  Subscription Subscription[]
}

model StripeCustomer {
  teamId           BigInt @id
  stripeCustomerId String @unique

  Team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)
}

model Subscription {
  id        String   @id
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @db.Timestamptz(6)

  teamId            BigInt
  status            SubscriptionStatus
  metadata          Json
  priceId           String
  quantity          Int?
  cancelAtPeriodEnd Boolean

  currentPeriodStart DateTime  @default(now()) @db.Timestamptz(6)
  currentPeriodEnd   DateTime  @default(now()) @db.Timestamptz(6)
  endedAt            DateTime? @db.Timestamptz(6)
  cancelAt           DateTime? @db.Timestamptz(6)
  canceledAt         DateTime? @db.Timestamptz(6)
  trialStart         DateTime? @db.Timestamptz(6)
  trialEnd           DateTime? @db.Timestamptz(6)

  Team  Team  @relation(fields: [teamId], references: [id], onDelete: Cascade)
  Price Price @relation(fields: [priceId], references: [id])
}

enum PriceType {
  OneTime
  Recurring
}

enum PriceInterval {
  Month
  Year
  Week
  Day
}

enum SubscriptionStatus {
  Trialing
  Active
  Canceled
  Incomplete
  IncompleteExpired
  PastDue
  Unpaid
}

enum NotificationType {
  ThreadNew
  ThreadTeamMemberReplied
  ThreadCustomerReplied
  ThreadAwaken
  ThreadClosed
  CommentMentioned
}

enum NotificationChannel {
  InApp
  Email
}

enum TeamInviteStatus {
  pending
  accepted
  cancelled
}

enum MessageType {
  email
  internal
}

enum MessageDirection {
  incoming
  outgoing
}

enum ThreadStateType {
  open
  done
  snoozed
  assigned
}

enum MemberRole {
  owner
  member
}
